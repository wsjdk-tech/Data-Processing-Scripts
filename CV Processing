clearvars
clc

% MATLAB Script to load data and plot Na vs <x>, 1/C^2 vs Vdc, and Capacitance vs Vdc




% Prompt the user to load the file
[fileName, filePath] = uigetfile('*.txt', 'Select the Data File');
if isequal(fileName, 0)
    disp('User canceled the file selection');
    return;
end

% Extract file name without extension for internal use
[~, fileBaseName, ~] = fileparts(fileName);

% Load the data from the file
data = readtable(fullfile(filePath, fileName), 'Delimiter', '\t', 'ReadVariableNames', false);

% this section is an attempt to get any input parameters
S = fileread(fullfile(filePath, fileName));
clc
k = 0;
j = 1;
T = {};
for i = 1:size(S,2)   % organizing rows
    if i > 3 && S(i-3) == 'E'
        j = j+1;
        k = 1;
    else
        k = k+1;
    end
    T{j,k} = S(i);
end
z = size(T); % joining rows
for y = 1:z(1)
    for x = 1:z(2)
        if isempty(T{y,x})
        else
            M{x} = T{y,x};
        end
    end
    U{y,1} = strjoin(M);
    M = {};
end
CV_param = strrep(U,' ','');

% Extracting epsilon:
for i = 1:size(CV_param,1)
    if contains(CV_param{i,1},'epsilon') == 0
    else
        epsilon = str2double(erase(CV_param{i,1},"epsilon"));
    end
end


%defining constants & setting device parameters:
epsilon0 = 8.854e-14; %permittivity in F/cm
kB = 1.380649e-23; %boltzmann constant in J/K
e = 1.60217663e-19; %charge of electron in C
Temp = 298; %25C
spaceList = {'CIGS','CdTe/Se','Other'}; 
[device, tf] = listdlg('ListString', spaceList,...
    'SelectionMode', 'Single', 'PromptString', 'What absorber is this?', 'Initialvalue', 1,'Name', 'Make choice');
if tf
    if device == 1
        prompt = 'What is the photoactive GGI ratio (Ga/(Ga+In))';
        X = str2double(char(inputdlg(prompt))); %GGI
        Eg1 = 1.01; %CIS in eV
        Eg2 = 1.65; %CGS in eV
        b = 0.151;  %bowing factor
        Eg = Eg2*X + Eg1*(1-X)-b*(1-X)*X;
        B1 = 5.6e17; %approximate CIS B value
        B2 = 1.7e18; %approximate CGS B value
        B = (B2-B1)*X + B1;
    elseif device == 2
        prompt = 'What is the photoactive SST ratio (Se/(Se+Te))';
        X = str2double(char(inputdlg(prompt))); %SST   
        Eg1 = 1.45; %CdTe in eV
        Eg2 = 1.70; %CdSe in eV
        b = 0.75;  %bowing factor
        Eg = Eg2*X + Eg1*(1-X)-b*(1-X)*X;
        B1 = 1.5e18; %approximate CIS B value
        B2 = 2e18; %approximate CGS B value
        B = (B2-B1)*X + B1;
    else
    end
else
    % user canceled or closed dialog
end

n_i = B*(Temp^1.5)*exp(-Eg*e/(2*kB*Temp)); %intrinsic carrier concentration

spaceList = {'CdS','ZnO','SnO2','Other'}; 
[device, tf] = listdlg('ListString', spaceList,...
    'SelectionMode', 'Single', 'PromptString', 'What buffer is this?', 'Initialvalue', 1,'Name', 'Make choice');
if tf
    if device == 1
        Nd = 10^17;
    elseif device == 2
        Nd = 10^17;  %Not real
    elseif device == 3
        Nd = 10^17;
    elseif device == 4
        prompt = 'What is the buffer carrier concentration (in the format XeY, where Y is the power of 10)';
        X = str2double(char(inputdlg(prompt)));
    else
    end
else
    % user canceled or closed dialog
end


% Extract the data columns
x = data{:, 7};  % <x> values (7th column)
Na = data{:, 8}; % Na values (8th column)
Vset = data{:, 1}; % Vset values (1st column)
C = data{:, 2};  % Capacitance (C) values (2nd column)
Vdc = data{:, 3}; % Vdc values (3rd column)

% Remove zero or negative values of Na
validIndices = Na > 0;
x_valid = x(validIndices);
Na_valid = Na(validIndices);

% Find the row where Vset = 0 (for inclusion in the plot)
zeroVIndex = find(Vset == 0);
if ~isempty(zeroVIndex)
    x_zeroV = x(zeroVIndex);
    Na_zeroV = Na(zeroVIndex);
else
    x_zeroV = NaN;
    Na_zeroV = NaN;
end


% Plot Na vs <x>
figure;
plot(x_valid, Na_valid, 'o-', 'LineWidth', 2, 'MarkerSize', 6);
hold on;
set(gca, 'YScale', 'log');  % Log scale for Y-axis

% Plot the point for Vset = 0 if it exists
if ~isnan(x_zeroV)
    plot(x_zeroV, Na_zeroV, 'ro', 'MarkerSize', 10, 'LineWidth', 3); % Red circle for Vset = 0
end

% Getting minimum carrier concentration & location
Na_minima = min(Na_valid);
x_minima = x_valid(find(Na_valid == min(Na_valid)));
x_minima = mean(x_minima); % if 2 or more points have same y value, it uses middle x

% Label the plot
xlabel('Profile Distance <x> (nm)');
ylabel('Carrier Concentration <N_{a}> (cm^{-3})');
title('N_{a} vs <x> (Including 0V Point)');
annotation('textbox', [0.01, 0.01, 0.3, 0.03], ...
    'String', ['File: ', fileName], ...
    'FontSize', 8, ...
    'EdgeColor', 'none', ...
    'Interpreter', 'none', ...
    'HorizontalAlignment', 'left');
grid on;
legend('Data points', '0V Point', 'Location', 'Best');
hold off;

% Calculate 1/C^2
C_square_inv = 1 ./ (C.^2);

% Remove invalid data points where C is zero or NaN
validIndices_C = ~isnan(C) & C > 0; % Valid indices for capacitance
C_square_inv_valid = C_square_inv(validIndices_C);
Vdc_valid = Vdc(validIndices_C);

Vbi = [];
gradCsqinv = gradient(C_square_inv_valid);  % evaluating gradient function of 1/C^2 vs Vdc
grad2Csqinv = gradient(gradCsqinv);

% figure()
% plot(Vdc_valid,gradCsqinv)
% figure()
% plot(Vdc_valid,grad2Csqinv)

%THIS IS FOR RIGHT MOST LINEAR REGION
for i = 1:size(grad2Csqinv,1)
    if i > 1 && C_square_inv_valid(i)<C_square_inv_valid(i-1) && grad2Csqinv(i)*grad2Csqinv(i-1)<0 %inflection point at decreasing region
        x1 = Vdc_valid(i-1);
        x2 = Vdc_valid(i);
        y1 = C_square_inv_valid(i-1);
        y2 = C_square_inv_valid(i);
    else
    end     
end
% this will end on the most far right inflection point only




POIx = x1;
POIy = y1;
m = (y2-y1)/(x2-x1);


%THIS IS FOR STEEPEST NEGATIVE GRADIENT
% POI = find(gradCsqinv == min(gradCsqinv));  % finding inflection point using steepest negative gradient
% % Evaluating POI coords
% POIx = Vdc_valid(POI);
% POIy = C_square_inv_valid(POI);
% % Calculating linear best fit line parameters
% m = ((C_square_inv_valid(POI+1)-C_square_inv_valid(POI))/(Vdc_valid(POI+1)-Vdc_valid(POI)) + ...
% (C_square_inv_valid(POI)-C_square_inv_valid(POI-1))/(Vdc_valid(POI)-Vdc_valid(POI-1)))/2;


c = POIy - m*POIx;
Vbi = -c/m;

%condition where an invalid Vbi is found (2 possibilities: -Vbi or no Vbi)
if isempty(Vbi) == 1 || Vbi < 0
    NRMSEcheck = zeros();
    Linfitx = zeros();
    Linfity = zeros();
    N = 7; %pts for fit
    testfits = size(C_square_inv_valid,1) - N;
    for j = 1:testfits
        for i = 1:N 
            Linfitx(i,j) = Vdc_valid(j+i-1);   %starts at lowest V
            Linfity(i,j) = C_square_inv_valid(j+i-1);
        end
        coefficients = polyfit(Linfitx(:,j), Linfity(:,j), 1);
        grad(j) = coefficients(1);
        yfit(:,j) = polyval(coefficients, Linfitx(:,j)); 
        NRMSEcheck(j) = goodnessOfFit(Linfity(:,j),yfit(:,j),'NRMSE');
    end
    j = find(NRMSEcheck == min(NRMSEcheck));  % this is the best fit linear region
    POIx = Linfitx(round((N+1)/2,0),j);
    POIy = Linfity(round((N+1)/2,0),j);
    m = grad(j);
    c = POIy - m*POIx;
    Vbi = -c/m;
else
end



Linear_fit = [POIx POIy;Vbi 0];

% Plot 1/C^2 vs Vdc
figure;
hold on
plot(Vdc_valid, C_square_inv_valid, 'o-', 'LineWidth', 2, 'MarkerSize', 6);
plot(Linear_fit(:,1),Linear_fit(:,2),'r--')

% Label the plot
xlabel('V_{DC} (mV)');
ylabel('1/C^{2} (F^{-2}cm^{4})');
ylim([0 C_square_inv_valid(1)])
title('1/C^{2} vs V_{DC}');
annotation('textbox', [0.01, 0.01, 0.3, 0.03], ...
    'String', ['File: ', fileName], ...
    'FontSize', 8, ...
    'EdgeColor', 'none', ...
    'Interpreter', 'none', ...
    'HorizontalAlignment', 'left');
grid on;
legend('Data points','Linear Fit (for V_{bi})', 'Location', 'Best');
hold off;

% Plot Capacitance vs Vdc
figure;
plot(Vdc, C, 'o-', 'LineWidth', 2, 'MarkerSize', 6);

% Label the plot
xlabel('V_{DC} (mV)');
ylabel('Capacitance (F/cm^{2})');
title('Capacitance vs V_{DC}');
annotation('textbox', [0.01, 0.01, 0.3, 0.03], ...
    'String', ['File: ', fileName], ...
    'FontSize', 8, ...
    'EdgeColor', 'none', ...
    'Interpreter', 'none', ...
    'HorizontalAlignment', 'left');
grid on;
legend('Data points', 'Location', 'Best');
hold off;

% Preparing output tables with additional plots (linear fits, 0V point etc.)
ZeroVpoint = [x_zeroV, Na_zeroV];   
ZeroVpoint(2:size(x_valid,1),:) = NaN;
Minimapoint = [x_minima, Na_minima];   
Minimapoint(2:size(x_valid,1),:) = NaN;
Linear_fit(3:size(Vdc_valid,1),:) = NaN;

CV_plot = array2table([Vdc,C],'VariableNames',{'DC Voltage (V)','Capactiance (F/cm^{2})'});
Nx_plot = array2table([x_valid,Na_valid,Minimapoint,ZeroVpoint], ...
    'VariableNames',{'Profile Distance <x> (nm)','Na (cm^{-3})','Minima Point <x>','Minima Point <Na>','0V Point <x>','0V Point <Na>'});
Mott_Schottky_plot = array2table([Vdc_valid, C_square_inv_valid,Linear_fit], ...
    'VariableNames',{'Vdc (V)','1/C^{2} (F^{-2}cm^{4})','Linear Fit <Vdc>','Linear Fit <1/C^{2}>'});

clc

Na_zeroVextra = Na_zeroV/(10^floor(log10(Na_zeroV))); %finding values of Na without power of 10
Na_minimaextra = Na_minima/(10^floor(log10(Na_minima)));

fprintf('Carrier Concentration Values:\n')
fprintf('--> At Minima: N_a = %.2f',Na_minimaextra)
fprintf('x10^%.0fcm^-3 ',floor(log10(Na_minima)))
fprintf('(at x = %.0fnm)\n',x_minima)
fprintf('--> At 0V:     N_a = %.2f',Na_zeroVextra)
fprintf('x10^%.0fcm^-3 ',floor(log10(Na_zeroV)))
fprintf('(at x = %.0fnm)\n',x_zeroV)
fprintf('\n')
fprintf('Built-in Voltage: V_bi = %.3fV\n',Vbi)

W_d = (10^9)*sqrt(2*Vbi*epsilon*(8.854*10^(-12))/(1.6*10^(-19)*Na_zeroV*(10^6))); %in nm
fprintf('Depletion Width: W_d = %.1fnm\n\n',W_d)

x_valid = x_valid/1000; %conversion to Î¼m
x_zeroV = x_zeroV/1000;
% ideal Na vs <x>
Na_ideal = linspace(10^18,10^12,10000); %resolution of line set to 10000pts, can be increased if Reliabilty val is untrustworthy
W_ideal = (10^4)*sqrt((2*kB*Temp*epsilon0*epsilon.*(Na_ideal+Nd).*log(Na_ideal.*Nd/(n_i^2)))./((e^2).*Na_ideal.*Nd));
[~, index] = min(abs(W_ideal - x_zeroV)); %approximating ideal line x value closest to 0V point
CV_Reliability = 10^(2-abs(log10(Na_ideal(index)/Na_zeroV)));

figure;
hold on
plot(W_ideal,Na_ideal)
plot(x_valid(zeroVIndex), Na_valid(zeroVIndex), 'ro-', 'LineWidth', 2, 'MarkerSize', 6);
plot(x_valid, Na_valid, 'r-', 'LineWidth', 2, 'MarkerSize', 6);
set(gca, 'XScale', 'log');  % Log scale for X-axis
set(gca, 'YScale', 'log');  % Log scale for Y-axis
xticks([0.05 0.1 0.5 1 5 10 50 100])
xlabel('Profile Distance <x> (Î¼m)');
ylabel('Carrier Concentration <N_{a}> (cm^{-3})');
title('Ideal N_{a} vs <x> Check With 0V Point');
legend('Ideal Line','0V Point (& Region)', 'Location', 'Best');
strmax = ['    \leftarrow Reliability Rating: ',num2str(round(CV_Reliability,1)),'%'];
text(x_zeroV,Na_zeroV,strmax,'HorizontalAlignment','left');
hold off

IdealPlot = [W_ideal' Na_ideal'];

fprintf('Reliability Rating of CV Plot: %.1f%% \n\n',CV_Reliability)

clearvars -except CV_plot Nx_plot Mott_Schottky_plot data Vbi Na_zeroV x_zeroV Na_minima x_minima CV_param epsilon W_d n_i Nd IdealPlot CV_Reliability
